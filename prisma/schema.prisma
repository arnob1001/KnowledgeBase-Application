// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  documents     Document[]
  documentTags  DocumentTag[]
}

model Document {
  id            String    @id @default(cuid())
  title         String
  content       String
  excerpt       String?
  isPublic      Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  authorId      String
  author        User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  versions      DocumentVersion[]
  tags          DocumentTag[]
  pdfData       PdfData?
}

model DocumentVersion {
  id            String    @id @default(cuid())
  content       String
  createdAt     DateTime  @default(now())
  documentId    String
  document      Document  @relation(fields: [documentId], references: [id], onDelete: Cascade)
}

model Tag {
  id            String    @id @default(cuid())
  name          String    @unique
  color         String?
  documents     DocumentTag[]
}

model DocumentTag {
  documentId    String
  tagId         String
  document      Document  @relation(fields: [documentId], references: [id], onDelete: Cascade)
  tag           Tag       @relation(fields: [tagId], references: [id], onDelete: Cascade)
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([documentId, tagId])
}

model PdfData {
  id            String    @id @default(cuid())
  filename      String
  fileSize      Int
  extractedText String
  documentId    String    @unique
  document      Document  @relation(fields: [documentId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}